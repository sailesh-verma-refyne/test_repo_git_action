name: Generate ClickUp Release Notes

on:
  pull_request:
    branches: [master, uat, release, dev]
    types: [closed]
  push:
    branches: [uat, master, release, dev]

jobs:
  release-notes:
    if: |
      github.event.pull_request.merged == true ||
      github.event_name == 'push'
    runs-on: ubuntu-latest
    env:
      CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install gh CLI
        run: sudo apt-get install gh -y

      - name: Auth GitHub CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get PR Body (Push Events)
        if: github.event_name == 'push'
        run: |
          echo "### Release Notes ($(date +%Y-%m-%d))" > release_notes.txt

          # Get last commit SHA
          LAST_COMMIT=$(git log -1 --pretty=format:"%H")
          echo "Last Commit: $LAST_COMMIT"

          # Get associated PR number via GitHub API
          PR_URL=$(gh api \
            -H "Accept: application/vnd.github.groot-preview+json" \
            /repos/${{ github.repository }}/commits/$LAST_COMMIT/pulls \
            --jq '.[0].url')

          if [ -z "$PR_URL" ]; then
            echo "❌ No PR found for commit. Exiting." >> release_notes.txt
            exit 0
          fi

          PR_BODY=$(gh api "$PR_URL" --jq '.body')
          echo "$PR_BODY" > commits.txt

      - name: Get PR Body (PR Events)
        if: github.event_name == 'pull_request'
        run: |
          echo "### Release Notes ($(date +%Y-%m-%d))" > release_notes.txt
          echo "${{ github.event.pull_request.body }}" > commits.txt

      - name: Extract ClickUp Task IDs and Fetch Titles
        run: |
          echo -e "\n### ClickUp Tasks" >> release_notes.txt

          # Extract ClickUp links
          grep -oE 'CU-[a-zA-Z0-9]+|https://app.clickup.com/t/[a-zA-Z0-9]+' commits.txt | sort -u > cu_ids_raw.txt || true

          > cu_ids.txt
          if [ -s cu_ids_raw.txt ]; then
            while read raw_id; do
              if [[ $raw_id == https://app.clickup.com/t/* ]]; then
                echo "${raw_id##*/}" >> cu_ids.txt
              elif [[ $raw_id == CU-* ]]; then
                echo "${raw_id#CU-}" >> cu_ids.txt
              fi
            done < cu_ids_raw.txt
          fi

          # Query ClickUp API
          if [ -s cu_ids.txt ]; then
            while read task_id; do
              if [ -n "$task_id" ]; then
                response=$(curl -s -H "Authorization: $CLICKUP_API_TOKEN" \
                  "https://api.clickup.com/api/v2/task/$task_id")

                title=$(echo "$response" | jq -r '.name // "No title found"')
                status=$(echo "$response" | jq -r '.status.status // "Unknown"')

                echo "- [Task: $task_id] $title (Status: $status)" >> release_notes.txt
              fi
            done < cu_ids.txt
          else
            echo "- No ClickUp tasks found in PR description or commits" >> release_notes.txt
          fi

      - name: Output Notes
        run: |
          echo "Release Notes Content:"
          cat release_notes.txt
