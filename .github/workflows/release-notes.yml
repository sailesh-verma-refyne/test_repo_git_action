name: Generate ClickUp Release Notes

on:
  push:
    branches:
      - uat
      - dev
      - release
      - master

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest
    env:
      CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}

    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up jq
        run: sudo apt-get install jq

      - name: Get merged PRs into this branch since last master merge
        id: fetch_prs
        run: |
          echo "### Release Notes ($(date +%Y-%m-%d))" > release_notes.txt
          echo -e "\n### ClickUp Tasks" >> release_notes.txt

          BASE_BRANCH="master"
          TARGET_BRANCH=$(echo "${GITHUB_REF##*/}")
          echo "Comparing $BASE_BRANCH..$TARGET_BRANCH"

          git fetch origin $BASE_BRANCH

          # Get all commits unique to this branch (since diverging from master)
          git log origin/$BASE_BRANCH..HEAD --pretty=format:"%H" > commit_shas.txt

          # Use GH CLI to find PRs associated with these commits
          echo "" > cu_ids.txt

          while read sha; do
            prs=$(gh pr list --search "$sha" --state merged --json number,title,body,url --jq '.[]')
            if [[ -n "$prs" ]]; then
              echo "$prs" | jq -c '.' >> prs_data.jsonl
            fi
          done < commit_shas.txt

          if [ ! -s prs_data.jsonl ]; then
            echo "- No merged PRs found." >> release_notes.txt
            exit 0
          fi

          cat prs_data.jsonl | while read pr; do
            pr_title=$(echo "$pr" | jq -r '.title')
            pr_body=$(echo "$pr" | jq -r '.body')
            pr_url=$(echo "$pr" | jq -r '.url')
            echo -e "\n**$pr_title**\n$pr_url" >> release_notes.txt

            # Extract ClickUp Task IDs from PR body
            echo "$pr_body" | grep -oE 'CU-[a-zA-Z0-9]+|https://app.clickup.com/t/[a-zA-Z0-9]+' | sort -u >> cu_ids.txt || true
          done

          # Remove duplicates
          sort -u cu_ids.txt -o cu_ids.txt

      - name: Fetch ClickUp Task Info
        if: success()
        run: |
          if [ ! -s cu_ids.txt ]; then
            echo "- No ClickUp tasks found in PR descriptions" >> release_notes.txt
          else
            while read id; do
              # Normalize ClickUp task ID
              if [[ $id == https://app.clickup.com/t/* ]]; then
                task_id="${id##*/}"
              elif [[ $id == CU-* ]]; then
                task_id="${id#CU-}"
              else
                task_id="$id"
              fi

              echo "Fetching task $task_id..."
              response=$(curl -s -H "Authorization: $CLICKUP_API_TOKEN" \
                "https://api.clickup.com/api/v2/task/$task_id")

              title=$(echo "$response" | jq -r '.name // "No title found"')
              status=$(echo "$response" | jq -r '.status.status // "Unknown status"')

              if [[ "$title" != "null" ]]; then
                echo "- [$task_id] $title (Status: $status)" >> release_notes.txt
              else
                echo "- [$task_id] (Unable to fetch details)" >> release_notes.txt
              fi
            done < cu_ids.txt
          fi

      - name: Output Release Notes
        run: |
          echo "Release Notes Content:"
          echo "------------------------"
          cat release_notes.txt
