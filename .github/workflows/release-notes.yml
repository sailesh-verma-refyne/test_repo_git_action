name: Generate ClickUp Release Notes
on:
  push:
    branches: [uat, dev, release, master]

jobs:
  release-notes:
    if: github.ref == 'refs/heads/uat' || github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/release' || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    env:
      CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}
    steps:
      - name: Checkout full history
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: |
          git fetch --all

      - name: Determine commits since last master merge
        run: |
          echo "### Release Notes ($(date +%Y-%m-%d))" > release_notes.txt

          # Find common ancestor (last merge base) between master and current branch
          BASE=$(git merge-base origin/master HEAD)
          echo "Base commit between origin/master and HEAD is $BASE"
          
          # Get all commit messages since that base
          git log $BASE..HEAD --pretty=format:"%s" > commits.txt

          echo "Collected commits:"
          cat commits.txt

      - name: Extract ClickUp Task IDs and Fetch Titles
        run: |
          echo -e "\n### ClickUp Tasks" >> release_notes.txt

          grep -oE 'CU-[a-zA-Z0-9]+|https://app.clickup.com/t/[a-zA-Z0-9]+' commits.txt | sort -u > cu_ids_raw.txt || true

          > cu_ids.txt
          if [ -s cu_ids_raw.txt ]; then
            while read raw_id; do
              if [[ $raw_id == https://app.clickup.com/t/* ]]; then
                echo "${raw_id##*/}" >> cu_ids.txt
              elif [[ $raw_id == CU-* ]]; then
                echo "${raw_id#CU-}" >> cu_ids.txt
              fi
            done < cu_ids_raw.txt
          fi

          if [ -s cu_ids.txt ]; then
            while read task_id; do
              response=$(curl -s -H "Authorization: $CLICKUP_API_TOKEN" \
                "https://api.clickup.com/api/v2/task/$task_id")
              
              error=$(echo "$response" | jq -r '.err // empty')
              if [ -n "$error" ]; then
                echo "- [Task: $task_id] (API Error: $error)" >> release_notes.txt
              else
                title=$(echo "$response" | jq -r '.name // "No title found"')
                status=$(echo "$response" | jq -r '.status.status // "Unknown status"')
                echo "- [Task: $task_id] $title (Status: $status)" >> release_notes.txt
              fi
            done < cu_ids.txt
          else
            echo "- No ClickUp tasks found in PR description or commit metadata" >> release_notes.txt
          fi

      - name: Output Release Notes
        run: |
          echo "Release Notes Content:"
          cat release_notes.txt
