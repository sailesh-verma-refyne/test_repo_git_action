name: Generate Release Notes with ClickUp Titles

on:
  push:
    branches:
      - uat
  pull_request:
    types: [opened, closed]
    branches:
      - master

jobs:
  generate-release-notes:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "actions@github.com"

      - name: Get recent commits
        id: commits
        run: |
          git log -n 20 --pretty=format:"%H" > commit-shas.txt
          echo "Collected commit SHAs from latest push or merged PR."

      - name: Fetch ClickUp ticket titles from commits
        id: clickup
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const clickupToken = process.env.CLICKUP_API_TOKEN;
            const commitShas = fs.readFileSync('commit-shas.txt', 'utf8').split('\n').filter(Boolean);

            const fetch = require('node-fetch');
            const prDetails = [];

            async function getClickUpTitle(taskId) {
              try {
                const response = await fetch(`https://api.clickup.com/api/v2/task/${taskId}`, {
                  headers: { Authorization: clickupToken }
                });
                const data = await response.json();
                return data.name || taskId;
              } catch (err) {
                return taskId;
              }
            }

            for (const sha of commitShas) {
              const { data: commit } = await github.rest.repos.getCommit({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: sha,
              });

              const message = commit.commit.message;
              const clickupIds = message.match(/CU-[a-zA-Z0-9]+/g) || [];

              const titles = await Promise.all(clickupIds.map(id => getClickUpTitle(id)));

              if (clickupIds.length > 0) {
                prDetails.push({
                  sha,
                  message,
                  clickupDetails: titles.map((t, i) => ({ id: clickupIds[i], title: t }))
                });
              }
            }

            const notes = prDetails.map(item => {
              const cuList = item.clickupDetails.map(c => `*${c.id}*: _${c.title}_`).join(', ');
              return `â€¢ (${cuList}) Commit: ${item.sha.slice(0, 7)} - ${item.message.split('\n')[0]}`;
            }).join('\n');

            fs.writeFileSync('release_notes.txt', notes);
            core.setOutput("release_notes", notes);
        env:
          CLICKUP_API_TOKEN: ${{ secrets.CLICKUP_API_TOKEN }}

      - name: Display release notes
        run: cat release_notes.txt
